/*
Daytona Server API

Testing PrebuildAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package daytona

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hide-org/hide/pkg/daytona"
)

func Test_daytona_PrebuildAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PrebuildAPIService DeletePrebuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configName string
		var prebuildId string

		httpRes, err := apiClient.PrebuildAPI.DeletePrebuild(context.Background(), configName, prebuildId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrebuildAPIService GetPrebuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configName string
		var prebuildId string

		resp, httpRes, err := apiClient.PrebuildAPI.GetPrebuild(context.Background(), configName, prebuildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrebuildAPIService ListPrebuilds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PrebuildAPI.ListPrebuilds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrebuildAPIService ListPrebuildsForProjectConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configName string

		resp, httpRes, err := apiClient.PrebuildAPI.ListPrebuildsForProjectConfig(context.Background(), configName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrebuildAPIService ProcessGitEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PrebuildAPI.ProcessGitEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PrebuildAPIService SetPrebuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configName string

		resp, httpRes, err := apiClient.PrebuildAPI.SetPrebuild(context.Background(), configName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
