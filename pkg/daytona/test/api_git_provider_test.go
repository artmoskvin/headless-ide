/*
Daytona Server API

Testing GitProviderAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package daytona

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/hide-org/hide/pkg/daytona"
)

func Test_daytona_GitProviderAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GitProviderAPIService GetGitContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GitProviderAPI.GetGitContext(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetGitProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetGitProvider(context.Background(), gitProviderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetGitProviderIdForUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var url string

		resp, httpRes, err := apiClient.GitProviderAPI.GetGitProviderIdForUrl(context.Background(), url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetGitUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetGitUser(context.Background(), gitProviderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetNamespaces(context.Background(), gitProviderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetRepoBranches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string
		var namespaceId string
		var repositoryId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetRepoBranches(context.Background(), gitProviderId, namespaceId, repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetRepoPRs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string
		var namespaceId string
		var repositoryId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetRepoPRs(context.Background(), gitProviderId, namespaceId, repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string
		var namespaceId string

		resp, httpRes, err := apiClient.GitProviderAPI.GetRepositories(context.Background(), gitProviderId, namespaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService GetUrlFromRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GitProviderAPI.GetUrlFromRepository(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService ListGitProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GitProviderAPI.ListGitProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService ListGitProvidersForUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var url string

		resp, httpRes, err := apiClient.GitProviderAPI.ListGitProvidersForUrl(context.Background(), url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService RemoveGitProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var gitProviderId string

		httpRes, err := apiClient.GitProviderAPI.RemoveGitProvider(context.Background(), gitProviderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GitProviderAPIService SetGitProvider", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.GitProviderAPI.SetGitProvider(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
